
const { bufferToHex, ripemd160 } = require("ethereumjs-util");

const code = '0x608060405234801561001057600080fd5b50600436106100395760e060020a60003504635ca740ab811461003e578063edf1baa21461007b575b600080fd5b6100796004803603608081101561005457600080fd5b50600160a060020a038135169060ff602082013516906040810135906060013561012b565b005b6100796004803603608081101561009157600080fd5b81359190810190604081016020820135602060020a8111156100b257600080fd5b8201836020820111156100c457600080fd5b803590602001918460018302840111602060020a831117156100e557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050823593505050602001356102ff565b60008061013a30868686610830565b909250905060018215151461018d576040805160e560020a62461bcd02815260206004820152600e6024820152609260020a6d1c9958dbdd995c8819985a5b195902604482015290519081900360640190fd5b600160a060020a038116730d56caf1ccb9eddf27423a1d0f8960554e7bc9d5146101fc576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e6d2cedccae440c8decae640dcdee840dac2e8c6d02604482015290519081900360640190fd5b6040805160e060020a6370a08231028152306004820181905291518892600160a060020a0384169263a9059cbb9284916370a08231916024808301926020929190829003018186803b15801561025157600080fd5b505afa158015610265573d6000803e3d6000fd5b505050506040513d602081101561027b57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b505050506040513d60208110156102f457600080fd5b505050505050505050565b8115156103405760405160e560020a62461bcd028152600401808060200182810382526029815260200180610a3f6029913960400191505060405180910390fd5b60008111610396576040805160e560020a62461bcd0281526020600482015260186024820152604060020a7763616e206e6f74207769746864726177206e6f7468696e6702604482015290519081900360640190fd5b6040805160e060020a6337ebbc0302815260048101869052905173cd1b3a9a7b5f84bc7829bc7e6e23adb1960bee979160009183916337ebbc03916024808301926020929190829003018186803b1580156103f057600080fd5b505afa158015610404573d6000803e3d6000fd5b505050506040513d602081101561041a57600080fd5b5051905061042f8465deadbeef00018761086d565b811461047a576040805160e560020a62461bcd02815260206004820152600f6024820152608a60020a6e1c1c9bdbd9881b9bdd081d985b1a5902604482015290519081900360640190fd5b6000808512156104de5761049365deadbeef00026109e6565b156104d25760405160e560020a62461bcd028152600401808060200182810382526028815260200180610a8f6028913960400191505060405180910390fd5b84600019029050610530565b6104ed65deadbeef00026109e6565b151561052d5760405160e560020a62461bcd028152600401808060200182810382526029815260200180610a166029913960400191505060405180910390fd5b50835b808411156105725760405160e560020a62461bcd028152600401808060200182810382526027815260200180610a686027913960400191505060405180910390fd5b83810390506000738f8fdca55f0601187ca24507d4a1fe1b387db90b9050600084600160a060020a0316636352211e8a6040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b1580156105d957600080fd5b505afa1580156105ed573d6000803e3d6000fd5b505050506040513d602081101561060357600080fd5b50519050600086610613896109f8565b03905080800288800203670de0b6b3a76400008104905083600160a060020a031663a9059cbb84836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561068d57600080fd5b505af11580156106a1573d6000803e3d6000fd5b505050506040513d60208110156106b757600080fd5b50506040805160e060020a63a9059cbb028152737e897000e80787653c6a7a2d20174a4225d897536004820152602481018a90529051733442c197cc858bed2476bdd9c7d4499552780f3d9163a9059cbb9160448083019260209291908290030181600087803b15801561072a57600080fd5b505af115801561073e573d6000803e3d6000fd5b505050506040513d602081101561075457600080fd5b5050600160a060020a03871663a983d43f8c6107778865deadbeef00018f61086d565b6040518363ffffffff1660e060020a0281526004018083815260200182815260200192505050600060405180830381600087803b1580156107b757600080fd5b505af11580156107cb573d6000803e3d6000fd5b505050506107de65deadbeef00026109e6565b604080518a8152905191151591600191600160a060020a038716917fb06edf4c1996c210275f4f14f22838b16888d5302f4c960ff531ef9574f615509181900360200190a45050505050505050505050565b60008060008060405188815287602082015286604082015285606082015260208160808360006001610bb8f1905190999098509650505050505050565b8051600090602090600119010615801561088a5750610122825111155b15156108da576040805160e560020a62461bcd0281526020600482015260146024820152606260020a731a5b9d985b1a59081c1c9bdbd988199bdc9b585d02604482015290519081900360640190fd5b6020820151600090859060029060f060020a900486845b60098110156109d85760018316151561090d5760009550610974565b6020840193508361ffff1688511015151561096d576040805160e560020a62461bcd0281526020600482015260156024820152605b60020a740e0e4dedecc40dcdee840d8dedcce40cadcdeeaced02604482015290519081900360640190fd5b8388015195505b84158015610980575085155b1561098e57600094506109bc565b6001821615156109ac578460005285602052604060002094506109bc565b8560005284602052604060002094505b600261ffff8416049250600261ffff83160491506001016108f1565b509298975050505050505050565b600065ffffffffffff8216115b919050565b600080821215610a0e57816000190290506109f3565b50806109f356fe63616e206f6e6c792077697468647261772066726f6d207965732d626f782069662062616c203e20306e6f207769746864726177616c20706f737369626c65206966206e6f20766f74657320706c6163656463616e206e6f74207769746864726177206d6f726520766f746573207468616e20706c6163656463616e206f6e6c792077697468647261772066726f6d206e6f2d626f782069662062616c203c2030a165627a7a72305820d68e84d63667dc56a916f53a93ce2ff704ab657d79cb250a4a2303c024ac00770029';

const keys = {
  "VOICE_CREDITS": "1231111111111111111111111111111111111123",
  "VOICE_TOKENS": "2341111111111111111111111111111111111234",
  "BALANCE_CARD": "3451111111111111111111111111111111111345",
  "OPERATOR": "7891111111111111111111111111111111111789",
  "TRASH_BOX": "4561111111111111111111111111111111111456",
  "MOTION_ID": "deadbeef0001",
  "IS_YES": "deadbeef0002"
};

const abi = [
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "voter",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "MOTION_ID",
        "type": "uint16"
      },
      {
        "indexed": true,
        "name": "isYes",
        "type": "bool"
      },
      {
        "indexed": false,
        "name": "withdrawnVotes",
        "type": "uint256"
      }
    ],
    "name": "NewWithdrawal",
    "type": "event"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "ballotCardId",
        "type": "uint256"
      },
      {
        "name": "proof",
        "type": "bytes"
      },
      {
        "name": "placedVotes",
        "type": "int256"
      },
      {
        "name": "removedVotes",
        "type": "uint256"
      }
    ],
    "name": "withdraw",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "token",
        "type": "address"
      },
      {
        "name": "v",
        "type": "uint8"
      },
      {
        "name": "r",
        "type": "bytes32"
      },
      {
        "name": "s",
        "type": "bytes32"
      }
    ],
    "name": "consolidate",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  }
];

const withParams = (code) => (params) => {
  let codeCopy = code;
  Object.keys(params).forEach((k) => {
    codeCopy = replaceAll(codeCopy, keys[k], params[k]);
  });
  return { 
    address: bufferToHex(ripemd160(codeCopy)),
    code: codeCopy,
    keys,
    abi,
    withParams: withParams(codeCopy),
  };
};

const replaceAll = (str, find, replace) =>
  str.replace(new RegExp(find, "g"), replace.replace("0x", "").toLowerCase());
    
module.exports = { 
  address: '0xb984b95eb574a47b9f88f361f253107c80833021',
  code,
  keys,
  abi,
  withParams: withParams(code)
};
